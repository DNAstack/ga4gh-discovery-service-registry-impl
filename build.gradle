import groovy.json.JsonSlurper
import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator
import org.yaml.snakeyaml.DumperOptions
import org.yaml.snakeyaml.Yaml

buildscript {
	ext {
		springBootVersion = '1.5.10.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath ("org.yaml:snakeyaml:1.17+")
		classpath ("io.swagger:swagger-codegen:2.2.3")
		classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.palantir.docker'

group = 'com.dnastack.dos.registry'
version = '1.0.0'
description = 'DOS Registry by DNAStack'
sourceCompatibility = 1.8


ext {
	serviceName = 'dos-reg'
	serviceVersion = '1.0.0'
}

repositories {
	mavenCentral()
}

configurations {
	generatedCompile
}

dependencyManagement {
	imports {
		mavenBom "org.keycloak.bom:keycloak-adapter-bom:3.4.1.Final"
	}
}

dependencies {

	generatedCompile 'org.springframework.boot:spring-boot-starter-data-rest'
	generatedCompile('io.springfox:springfox-swagger2:2.7.0')
	generatedCompile('io.springfox:springfox-swagger-ui:2.7.0')
	generatedCompile group: 'joda-time', name: 'joda-time', version: '2.3'

	compile('org.springframework.boot:spring-boot-starter')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('com.github.jmnarloch:modelmapper-spring-boot-starter:1.1.0')
	compile('org.keycloak:keycloak-spring-boot-starter')
	compile('io.springfox:springfox-swagger2:2.7.0')
	compile('io.springfox:springfox-swagger-ui:2.7.0')
	compile group: 'joda-time', name: 'joda-time', version: '2.3'
	compile('org.jadira.usertype:usertype.core:5.0.0.GA')
	compile("com.fasterxml.jackson.datatype:jackson-datatype-joda")
	compileOnly('org.projectlombok:lombok')
	// Use MySQL Connector-J
	compile('mysql:mysql-connector-java')
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
	compile group: 'com.querydsl', name: 'querydsl-jpa', version: '4.1.3'
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'


	runtime('org.springframework.boot:spring-boot-devtools')

//	testCompile('org.hsqldb:hsqldb')
	testCompile('com.h2database:h2')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test:4.2.2.RELEASE')
}

sourceSets {
	generated {
		compileClasspath = configurations.generatedCompile
	}
	main {
		compileClasspath += generated.output
		runtimeClasspath += generated.output
	}
	test {
		compileClasspath += generated.output
		runtimeClasspath += generated.output
	}
}

jar {
	manifest {
		attributes 'Implementation-Title': project.description,
				'Implementation-Version': project.version
	}
}

bootRun {
	systemProperties = System.properties
	classpath += sourceSets.generated.output
}

jar {
	from sourceSets.generated.output
}

def swaggerSourceFile = 'src/main/resources/api.yml'
def swaggerTargetFolder = 'src/generated/java'

task generateApi {
	inputs.file("$projectDir/$swaggerSourceFile")
	outputs.dir("$projectDir/$swaggerTargetFolder")
	doLast {
		def config = new CodegenConfigurator()
		config.setInputSpec("file:///$projectDir/$swaggerSourceFile")
		config.setOutputDir("$projectDir")
		config.setLang('spring')
		config.setAdditionalProperties([
				'interfaceOnly':'true',
				'modelPackage':'com.dnastack.dos.registry.controller',
				'apiPackage':'com.dnastack.dos.registry.controller',
				'sourceFolder'  : swaggerTargetFolder,
				'useBeanValidation':true,
				'modelNameSuffix':'Dto'
		])
		new DefaultGenerator().opts(config.toClientOptInput()).generate()
	}
}

compileGeneratedJava.dependsOn generateApi
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava

clean.doFirst {
	delete("${projectDir}/$swaggerTargetFolder")
}

docker {
	//name "${project.group}/${jar.baseName}"
    name "dos-registry-docker"
	files jar.archivePath
	buildArgs(['JAR_FILE': "${jar.archiveName}"])
}